"""inital migration

Revision ID: 5f157586db8e
Revises: 
Create Date: 2025-09-02 14:18:23.088400

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel



# revision identifiers, used by Alembic.
revision: str = '5f157586db8e'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('account',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('size', sa.Integer(), nullable=False),
    sa.Column('max_risk_percentage', sa.Float(), nullable=False),
    sa.Column('max_active_trades', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('trade',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('symbol', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('setup', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('rating', sa.Float(), nullable=False),
    sa.Column('status', sa.Enum('OPEN', 'CLOSED', 'INVALIDATED', 'WATCHING', name='tradestatus'), nullable=False),
    sa.Column('idea_date', sa.DateTime(), nullable=False),
    sa.Column('enter_date', sa.DateTime(), nullable=True),
    sa.Column('exit_date', sa.DateTime(), nullable=True),
    sa.Column('outcome', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('trade', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_trade_symbol'), ['symbol'], unique=False)

    op.create_table('annotation',
    sa.Column('date', sa.DateTime(), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('content', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('annotation_type', sa.Enum('note', 'catalyst', name='annotationtype'), nullable=False),
    sa.Column('trade_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['trade_id'], ['trade.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('scale_plan',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('trade_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('status', sa.Enum('PLANNED', 'CANCELED', 'TRIGGERED', 'FILLED_PARTIAL', 'FILLED', name='scaleplanstatus'), nullable=False),
    sa.Column('order_type', sa.Enum('MARKET', 'LIMIT', 'STOP_LIMIT', name='ordertype'), nullable=False),
    sa.Column('trade_type', sa.Enum('LONG', 'SHORT', name='tradetype'), nullable=False),
    sa.Column('plan_type', sa.Enum('ENTRY', 'TARGET', 'STOP_LOSS', name='plantype'), nullable=False),
    sa.Column('label', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('qty', sa.Float(), nullable=False),
    sa.Column('target_price', sa.Float(), nullable=True),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('good_till', sa.DateTime(), nullable=True),
    sa.Column('stop_price', sa.Float(), nullable=True),
    sa.Column('limit_price', sa.Float(), nullable=True),
    sa.CheckConstraint('qty > 0', name='ck_scale_plan_qty_positive'),
    sa.ForeignKeyConstraint(['trade_id'], ['trade.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('scale_plan', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_scale_plan_plan_type'), ['plan_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_scale_plan_status'), ['status'], unique=False)
        batch_op.create_index(batch_op.f('ix_scale_plan_trade_id'), ['trade_id'], unique=False)

    op.create_table('trade_execution',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('trade_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('scale_plan_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('side', sa.Enum('BUY', 'SELL', name='side'), nullable=False),
    sa.Column('source', sa.Enum('MANUAL', 'IMPORT', 'AUTOMATED', name='execsource'), nullable=False),
    sa.Column('commission', sa.Float(), nullable=False),
    sa.Column('executed_at', sa.DateTime(), nullable=False),
    sa.Column('qty', sa.Integer(), nullable=False),
    sa.Column('price', sa.Float(), nullable=False),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.CheckConstraint('commission >= 0', name='ck_trade_execution_commission_nonneg'),
    sa.CheckConstraint('price > 0', name='ck_trade_execution_price_positive'),
    sa.CheckConstraint('qty > 0', name='ck_trade_execution_qty_positive'),
    sa.ForeignKeyConstraint(['scale_plan_id'], ['scale_plan.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['trade_id'], ['trade.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('trade_execution', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_trade_execution_executed_at'), ['executed_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_trade_execution_trade_id'), ['trade_id'], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('trade_execution', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_trade_execution_trade_id'))
        batch_op.drop_index(batch_op.f('ix_trade_execution_executed_at'))

    op.drop_table('trade_execution')
    with op.batch_alter_table('scale_plan', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_scale_plan_trade_id'))
        batch_op.drop_index(batch_op.f('ix_scale_plan_status'))
        batch_op.drop_index(batch_op.f('ix_scale_plan_plan_type'))

    op.drop_table('scale_plan')
    op.drop_table('annotation')
    with op.batch_alter_table('trade', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_trade_symbol'))

    op.drop_table('trade')
    op.drop_table('account')
    # ### end Alembic commands ###
